name: Deploy to AWS ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: goalaroo-app
  ECS_CLUSTER: goalaroo-cluster
  ECS_SERVICE: goalaroo-service
  ECS_TASK_DEFINITION: goalaroo-task

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Check infrastructure status
      id: check-infrastructure
      run: |
        echo "🔍 Checking infrastructure status..."
        
        # Check if cluster exists
        if aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --region ${{ env.AWS_REGION }} --query 'clusters[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
          echo "✅ ECS Cluster exists and is active"
          echo "cluster_exists=true" >> $GITHUB_OUTPUT
        else
          echo "❌ ECS Cluster does not exist or is not active"
          echo "cluster_exists=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if service exists
        if aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query 'services[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
          echo "✅ ECS Service exists and is active"
          echo "service_exists=true" >> $GITHUB_OUTPUT
        else
          echo "❌ ECS Service does not exist or is not active"
          echo "service_exists=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if task definition exists
        if aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "✅ Task definition exists"
          echo "task_def_exists=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Task definition does not exist"
          echo "task_def_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Check if task definition exists
      id: check-task-def
      run: |
        if aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Validate infrastructure
      run: |
        if [ "${{ steps.check-infrastructure.outputs.cluster_exists }}" != "true" ]; then
          echo "❌ ECS Cluster does not exist. Please run 'terraform apply' first."
          exit 1
        fi
        
        if [ "${{ steps.check-infrastructure.outputs.service_exists }}" != "true" ]; then
          echo "❌ ECS Service does not exist. Please run 'terraform apply' first."
          exit 1
        fi
        
        echo "✅ Infrastructure is ready for deployment"

    - name: Download existing task definition
      if: steps.check-task-def.outputs.exists == 'true'
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
        --region ${{ env.AWS_REGION }} --query taskDefinition > task-definition.json

    - name: Create new task definition
      if: steps.check-task-def.outputs.exists == 'false'
      run: |
        # Get AWS account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        cat > task-definition.json << EOF
        {
          "family": "${{ env.ECS_TASK_DEFINITION }}",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::${ACCOUNT_ID}:role/goalaroo-ecs-execution-role",
          "taskRoleArn": "arn:aws:iam::${ACCOUNT_ID}:role/goalaroo-ecs-task-role",
          "containerDefinitions": [
            {
              "name": "goalaroo-container",
              "image": "${{ steps.build-image.outputs.image }}",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 3000,
                  "protocol": "tcp"
                }
              ],
              "environment": [
                {
                  "name": "NODE_ENV",
                  "value": "production"
                },
                {
                  "name": "AWS_REGION",
                  "value": "${{ env.AWS_REGION }}"
                },
                {
                  "name": "FRONTEND_URL",
                  "value": "https://goalaroo.mcsoko.com"
                },
                {
                  "name": "API_URL",
                  "value": "https://api.mcsoko.com"
                }
              ],
              "secrets": [
                {
                  "name": "JWT_SECRET",
                  "valueFrom": "arn:aws:ssm:${{ env.AWS_REGION }}:${ACCOUNT_ID}:parameter/goalaroo/jwt-secret"
                },
                {
                  "name": "FROM_EMAIL",
                  "valueFrom": "arn:aws:ssm:${{ env.AWS_REGION }}:${ACCOUNT_ID}:parameter/goalaroo/from-email"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/goalaroo",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF

    - name: Update task definition image
      if: steps.check-task-def.outputs.exists == 'true'
      run: |
        # Update the image in the task definition and clean up metadata fields
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) | .containerDefinitions[0].image = "${{ steps.build-image.outputs.image }}"' task-definition.json > new-task-definition.json
        
        # Clean up additional problematic fields for FARGATE
        jq 'del(.containerDefinitions[0].portMappings[0].hostPort, .containerDefinitions[0].mountPoints, .containerDefinitions[0].volumesFrom, .containerDefinitions[0].systemControls, .volumes, .placementConstraints)' new-task-definition.json > cleaned-task-definition.json

    - name: Copy task definition for registration
      if: steps.check-task-def.outputs.exists == 'true'
      run: |
        cp cleaned-task-definition.json task-definition-to-register.json

    - name: Copy task definition for registration (new)
      if: steps.check-task-def.outputs.exists == 'false'
      run: |
        # Clean up any metadata fields that might be present
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) // .' task-definition.json > task-definition-to-register.json

    - name: Debug task definition
      run: |
        echo "Task definition to register:"
        cat task-definition-to-register.json

    - name: Deploy to ECS
      run: |
        # Register the task definition
        echo "Registering task definition..."
        aws ecs register-task-definition --cli-input-json file://task-definition-to-register.json --region ${{ env.AWS_REGION }}
        
        # Check if service exists
        echo "Checking if ECS service exists..."
        SERVICE_STATUS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query 'services[0].status' --output text 2>/dev/null || echo "NOT_FOUND")
        
        if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
          echo "Service is active. Updating service..."
          # Update existing service
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
          
          echo "Waiting for service to be stable (timeout: 10 minutes)..."
          # Wait for service to be stable with timeout
          timeout 600 bash -c '
            while true; do
              STATUS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query "services[0].status" --output text)
              RUNNING=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query "services[0].runningCount" --output text)
              DESIRED=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query "services[0].desiredCount" --output text)
              PENDING=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query "services[0].pendingCount" --output text)
              
              echo "Service Status: $STATUS, Running: $RUNNING/$DESIRED, Pending: $PENDING"
              
              if [ "$STATUS" = "ACTIVE" ] && [ "$RUNNING" = "$DESIRED" ] && [ "$PENDING" = "0" ]; then
                echo "Service is stable!"
                break
              fi
              
              sleep 30
            done
          '
          
          if [ $? -eq 124 ]; then
            echo "❌ Service did not become stable within 10 minutes"
            echo "Checking service details..."
            aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }}
            exit 1
          fi
        else
          echo "❌ Service does not exist or is not active. Status: $SERVICE_STATUS"
          echo "Please run Terraform first to create the infrastructure."
          exit 1
        fi

    - name: Check ECS Service Status (if deployment failed)
      if: failure()
      run: |
        echo "🔍 Checking ECS service status and logs..."
        
        # Get service details
        echo "Service Details:"
        aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }}
        
        # Get recent tasks
        echo "Recent Tasks:"
        TASK_ARNS=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query 'taskArns' --output text)
        
        if [ ! -z "$TASK_ARNS" ]; then
          echo "Task Details:"
          aws ecs describe-tasks --cluster ${{ env.ECS_CLUSTER }} --tasks $TASK_ARNS --region ${{ env.AWS_REGION }}
          
          # Get logs for the most recent task
          LATEST_TASK=$(echo $TASK_ARNS | tr ' ' '\n' | head -1)
          if [ ! -z "$LATEST_TASK" ]; then
            echo "Recent Logs for task $LATEST_TASK:"
            aws logs get-log-events \
              --log-group-name "/ecs/goalaroo" \
              --log-stream-name "ecs/goalaroo-container/$LATEST_TASK" \
              --region ${{ env.AWS_REGION }} \
              --start-time $(date -d '10 minutes ago' +%s)000 \
              --query 'events[*].message' \
              --output text || echo "Could not retrieve logs"
          fi
        fi

    - name: Verify API URL Configuration
      run: |
        echo "🔍 Verifying API URL configuration..."
        echo "Current API_BASE_URL in app.js:"
        grep "API_BASE_URL" app.js
        echo "✅ API URL is correctly configured for production deployment"

    - name: Deploy Frontend to S3
      run: |
        echo "🚀 Deploying frontend files to S3..."
        
        # Get the S3 bucket name from Terraform output (hardcoded for now)
        S3_BUCKET="goalaroo-frontend-goalaroo"
        
        # Sync frontend files to S3
        aws s3 sync . s3://$S3_BUCKET \
          --exclude "backend/*" \
          --exclude "terraform/*" \
          --exclude ".git/*" \
          --exclude ".github/*" \
          --exclude "*.sh" \
          --exclude "*.md" \
          --exclude "*.yml" \
          --exclude "*.yaml" \
          --exclude "*.tf" \
          --exclude "*.tfvars" \
          --exclude "taskdef.json" \
          --exclude "buildspec.yml" \
          --exclude "appspec.yml" \
          --exclude ".gitignore" \
          --exclude "README.md" \
          --cache-control "max-age=3600" \
          --region ${{ env.AWS_REGION }}
        
        echo "✅ Frontend files deployed to S3"
        
        # Invalidate CloudFront cache
        echo "🔄 Invalidating CloudFront cache..."
        aws cloudfront create-invalidation \
          --distribution-id EPK5KW09K62EN \
          --paths "/*" \
          --region ${{ env.AWS_REGION }} || echo "⚠️ Could not invalidate CloudFront cache (distribution ID may need to be updated)"

    - name: Deployment Status
      run: |
        echo "✅ Deployment completed successfully!"
        echo "🚀 API URL: https://api.mcsoko.com"
        echo "🌐 Frontend URL: https://goalaroo.mcsoko.com"
        echo "🐳 ECR Repository: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}"
        echo "📦 Image Tag: ${{ github.sha }}" 